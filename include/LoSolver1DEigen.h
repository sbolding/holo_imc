//  This is set up currently to only work with vacuum boundary conditions.  Reflective is not yet an option
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : holo
//  @ File Name : LoSolver1DEigen.h
//  @ Date : 5/4/2014
//  @ Author : srb
//
//


#if !defined(_LOSOLVER1DEIGEN_H)
#define _LOSOLVER1DEIGEN_H

#include "LoSolver1D.h"
#include "GlobalConstants.h"
#include <string>
#include <stdio.h>
#include <stdlib.h>
#include <cmath>
#include <algorithm>

class LoSolver1DEigen : public LoSolver1D
{
protected:

	/* Values of the eigenvalue at current and previous iteration*/
	double _k_eff;
	double _k_eff_previous; 
	/* Fission source integrals over domain (angle and space)*/
	double _fiss_src_integral_prev;
	double _fiss_src_integral;

	//Alias for the fission source vector, which is stored as the load vector in general system
	numVector* & _fiss_src;
		
	bool _first_solve; //if the first time LO system solved then have to initialize source guess
	double _convg_tol; //convergence tolerance may have different meanigns for different solver types, generally relative tolerance between iterations with spectral radius estimate

	/* Which solver method to use*/
	std::string _eigen_method_str;
	LoMethods::EigenMethods _eigen_method;
	
	// Update FissionSource updates the load vector of the eigen
	// value equation to add in source term from nu*sif_f*phi,
	// does not include k factor
	double updateFissionSource(); //returns integral over domain of nu_sig_f*phi

	//Different solver methods
	void fixedPointIteration(double tol, unsigned int max_iterations);
	void arnolidi(double tol, unsigned int n_restart_iter);
	void nKA(double tol);

	//Methods specific to fixed point iteration
	void integrateFissionSource(const numVector& fiss_source); //Integrate the fission source over the volume, for computing new k

public:

	LoSolver1DEigen(Mesh* mesh, std::string solver_mode, double convg_tol);
	~LoSolver1DEigen();
	virtual void solveSystem(); //override the solution method
};

#endif  //_LOSOLVER1DEIGEN_H
