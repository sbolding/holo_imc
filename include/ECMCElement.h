//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : ECMCElement.h
//  @ Date : 2/10/2014
//  @ Author : 
//
//


#if !defined(_ECMCELEMENT_H)
#define _ECMCELEMENT_H

#include "ECMCTally.h"
#include "Element.h"
#include <iostream>
#include <ios>
#include <cmath>

class ECMCElement
{
protected:
	
	int _id;							//Element ID #
	std::vector<double> _ang_flux_dof;  //The moments that are needed to reconstruct the angular flux
	ECMCTally* _tally;					//Tally that is used to compute the error each time
	std::vector<double> _coordinates;	//The center of the cell in terms of x,y,mu, mu is always last
	std::vector<double> _dimensions;	//Width of the cell in x,y,mu, mu is always last
	Element* _spatial_element; //The element in the LO geometry that this ECMC element points to
	ECMCElement();	//do not use 

	//For adaptive mesh refinement, the list of children could be stored in this class if it was done more appropriately
	bool _has_children;				     //default of false
	unsigned int _refinement_level;		 //0 is no refinement

public:

	//Constructors
	ECMCElement(int id, Element* spatial_element, std::vector<double> dimensions, std::vector<double> coordinates);
	ECMCElement(int id, Element* spatial_element, int number_spatial_dimensions, int number_angular_dimensions);  //let derived classes set actual values

	//virtual functions
	virtual void computeAngularFLuxDOF(int n_histories, double & l2_error_squared_el, double total_src_strength=1.0) = 0; //optional ext src strength, 1.0 normalizes to per source particle, computes l2 error over element
	virtual void printAngularFluxDOF(std::ostream & out) const = 0;

	//Access functions
	std::vector<double> getElementDimensions() const;
	std::vector<double> getElementCoordinates() const;
	std::vector<double> getAngularFluxDOF() const;
	unsigned int getRefinementLevel() const;
	int getID() const;
	Element* getSpatialElement() const
	{
		return _spatial_element;
	}
	void printData(std::ostream & out) const;

	//Mesh refinement functions
	virtual void refine(int last_element_id) = 0; //will create new elements and update refinement level, etc.
	bool hasChildren()
	{
		return _has_children;
	}

};

#endif  //_ECMCELEMENT_H
