// This object assumes that the source is isotropic across each of the spatial
// elements.  The source is then mapped onto each of the ECMC elements with
// equal probability for that spatial element
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : LinDiscSource.h
//  @ Date : 2/8/2014
//  @ Author : 
//
//


#if !defined(_LINDISCSOURCE_H)
#define _LINDISCSOURCE_H

#include "Source.h"
#include "AliasSampler.h"
#include <map>

class LinDiscSource : public Source
{
private:

	AliasSampler* _alias_sampler; //pointer because it is dynamically allocated, may not be called if stratified sampling is used
    std::vector<std::vector<double>> _total_src_nodal_values; //nodal values of external source + (possibly scattering source), depending on method
	void sampleLinDiscSource(std::vector<double> nodal_values); //Samples position based on linear discontinuous source

	//BC source information
	AliasSampler* _bc_element_sampler;
	std::map<int, int> _bc_element_map;  //maps alias sampler return result to the correct element ID
	
public:
	LinDiscSource(Particle1D * particle);
	~LinDiscSource();
	virtual void sampleSourceParticle();
	virtual double getTotalSourceStrength();
};

#endif  //_LINDISCSOURCE_H
