//
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : Element.cpp
//  @ Date : 11/1/2013
//  @ Author : 
//
//


#include <stdlib.h>
#include "../include/Element.h"
#include "../include/LoData1D.h"

Element::Element(int dimension, int id, MaterialConstant* mat, std::vector<Node* >  nodes)
{
	_nodes = nodes;
	_dimension = dimension;
	_id = id;
	_n_nodes = _nodes.size();
	_mat = mat;
	_elem_dofs.resize(4); //It must be at least of size 4, this is for initializing references in 1D class
}

Element::Element()
{
	//Dont call me ever
}

void Element::setLoData(LoData1D &lo_data)
{
	*_lo_data = lo_data; //set the value, not the address
}

void Element::setMaterial(MaterialConstant &mat)
{
	*_mat = mat;
}

std::vector<double> Element::getExtSourceNodalValues(void) const
{
	return _ext_source_nodal_values;
}

void Element::setExtSourceNodalValues(std::vector<double> ext_source_values)
{
	if (ext_source_values.size() != _n_nodes)
	{
		std::cerr << "Passed in the wrong size of vector to setExtSourceNodalvalues" << std::endl;
		exit(1);
	}
	_ext_source_nodal_values = ext_source_values;
}


//These functions just return the values, no pointers, copying data and material
LoData1D Element::getLoData(void) const
{
	return *_lo_data;
}

int Element::getNumNodes(void) const
{
	return _n_nodes;
}

MaterialConstant Element::getMaterial(void) const
{
	return *_mat;
}

int Element::getMaterialID(void) const
{
	return _mat->getID();
}

int Element::getNumDof(void) const
{
	return _n_elem_dof;
}

int Element::getID(void) const
{
	return _id;
}

