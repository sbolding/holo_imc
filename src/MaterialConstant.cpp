// 
//
//  Generated by StarUML(tm) C++ Add-In
//
//  @ Project : Untitled
//  @ File Name : MaterialConstant.cpp
//  @ Date : 11/3/2013
//  @ Author : @SRB
//
//


#include "../include/MaterialConstant.h"
#include <iomanip>

MaterialConstant::MaterialConstant()
{
	//Never call me
}

MaterialConstant::MaterialConstant(int id, double sigma_a, double sigma_s):
_id(id),
_sigma_a(sigma_a),
_sigma_s(sigma_s),
_nu_sigma_f(0.0), //no fission
_sigma_f(0.0)
{
	_sigma_t = _sigma_a + _sigma_s;
}

MaterialConstant::MaterialConstant(int id, double sigma_a, double sigma_s, double sigma_f, double nu) :
_id(id),
_sigma_a(sigma_a),
_sigma_s(sigma_s),
_nu(nu),
_sigma_f(sigma_f),
_nu_sigma_f(nu*sigma_f) //no fission
{
	_sigma_t = _sigma_a + _sigma_s + sigma_f;
}

double MaterialConstant::getSigmaA( void) const
{
	return _sigma_a;
}

double MaterialConstant::getSigmaT( void) const
{
	return _sigma_t;
}

double MaterialConstant::getNuSigmaF(void) const
{
	return _nu_sigma_f;
}

double MaterialConstant::getSigmaS( void) const
{
	return _sigma_s;
}

int MaterialConstant::getID(void) const
{
	return _id;
}

void MaterialConstant::print(std::ostream &out) const
{
	using std::endl;
	out << " ID = ";
	out.width(4);
	out << _id;
	out << ", sig_a = ";
	std::setprecision(4);
	out << _sigma_a;
	out << ", sig_s = ";
	std::setprecision(4);
	out << _sigma_s;
	out << ", sig_t = ";
	std::setprecision(4);
	out << _sigma_t << endl;
}
